import pandas as pd  # 导入 pandas 库，用来加载、清洗、处理、分析结构化数据（表格型数据）。
import re
# 读取 CSV 文件
data = pd.read_csv('/Users/qijinnian/Desktop/learn/项目一厦门工作/job.csv')

# 查看前 5 行，确认数据导入成功
print(data.head())
import pandas as pd

# CSV 文件路径
file_path = '/Users/qijinnian/Desktop/learn/项目一厦门工作/job.csv'

# 定义列名
column_names = [
    '职位', '招聘人数', '公司名称', '全职还是兼职', '工作经验', '语言要求', '年龄', '性别',
    '学历', '工作地点', '工作时间', '工资', '福利', '联系人', '电话',
    '公司位置', '企业性质', '经营项目', '岗位要求'
]

# 读取 CSV，并指定列名，header=None 表示原文件没有列名
data = pd.read_csv('/Users/qijinnian/Desktop/learn/项目一厦门工作/job.csv', header=None, names=column_names)

# 检查数据
print(data.head())


# 数据重复处理: 删除重复值
data.drop_duplicates(inplace=True) # 删除DataFrame中重复的行，只保留每组重复行的第一行，其余行删除
data.reset_index(drop=True, inplace=True) # 重置DataFrame的索引，删除旧索引，生成连续的0,1,2,... 索引

# 缺失值查看、处理：
data.isnull().sum()
"""
职位             0
招聘人数       1409
公司名称          0
全职还是兼职       0
工作经验          0
语言要求      89137
年龄         59774
性别             0
学历             0
工作地点          7
工作时间       23989
工资          17182
福利          12272
联系人            3
电话              0
公司位置         275
企业性质          55
经营项目         816
岗位要求           0
dtype: int64
"""

# 招聘人数处理：缺失值填 1 ，一般是一人; 若干人当成 3人
data['招聘人数'].unique()
data['招聘人数'].fillna(1) # 把 NaN（缺失值）填充为 1
data['招聘人数'].replace('若干',3) # 把 '若干' 替换为 3

# 年龄要求：缺失值填 无限；格式化
data['年龄'].unique()
data['年龄'].fillna('不限')
data['年龄'] = data['年龄'].apply(
    lambda x: x.replace('岁至', '-').replace('岁', '') if isinstance(x, str) else str(x)
)
# apply 可以对列中的每个元素应用自定义函数，把 '岁至' 替换为 '-'，把剩下的 '岁' 去掉

# 语言要求: 忽视精通程度，格式化
data['语言要求'].unique()
data['语言要求'].fillna('不限', inplace=True)
data['语言要求'] = data['语言要求'].apply(lambda x: x.split('水平')[0] )
data['语言要求'].replace('其他', '不限')

# 月薪: 格式化。根据一般经验取低值，比如 5000-6000, 取 5000
data['工资'].unique()
data['工资'] = data['工资'].apply(lambda x: x.replace('参考月薪： ', '') if '参考月薪： ' in str(x) else x)
data['工资'] = data['工资'].apply(lambda x: x.split('-', 1)[0] if '-' in str(x) else x )
data['工资'].fillna('0')

# 其它岗位说明：缺失值填无
data.fillna('其他', inplace=True)
